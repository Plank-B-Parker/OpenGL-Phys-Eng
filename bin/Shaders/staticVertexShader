#version 330 core

in vec3 Pos;
in vec3 Norm;
in vec2 UV;
in vec3 Col;

out vec2 uv;
out vec3 norm;
out vec3 col;

out vec3 worldPos;
out vec3 toCamera;

uniform mat3 objBasis;
uniform vec3 objPos;

layout (std140, column_major) uniform Camera{
	vec3 pos;
	mat3 basis;
	float zp;
	float zs;
	float _fov;
	float _ar;
} cam;

void main(void){

	vec3 pos = objBasis*Pos + objPos;
	vec3 pos_cam = pos - cam.pos;
	toCamera = -pos_cam;
	
	pos_cam = pos_cam*cam.basis;
	gl_Position = vec4(cam._ar*cam._fov*pos_cam.x, cam._fov*pos_cam.y, cam.zs*pos_cam.z - cam.zp, pos_cam.z);
	
	worldPos = pos;
	
	norm = objBasis*Norm;
	uv = UV;
	col = Col;

}