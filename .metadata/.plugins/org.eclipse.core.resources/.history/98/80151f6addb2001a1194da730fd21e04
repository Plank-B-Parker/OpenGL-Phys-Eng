package Physics;

import Math.Mat3d;
import Math.Vect3d;

public class Axis implements PhysicsAttrib{
	
	//Centre of Mass.
	Vect3d centre;
	
	//Basis.
	private Mat3d B;
	private Mat3d _B = new Mat3d();
	
	//Moment of Inertia.
	private Mat3d I = new Mat3d();
	private Mat3d _I = new Mat3d();
	
	//Angular variables.
	public Vect3d angMomentum = new Vect3d();
	private Vect3d w = new Vect3d();
	public Vect3d torque = new Vect3d();
	
	//Temp variables for calculations and avoid object creation.
	final private static Mat3d tempM1 = new Mat3d(), tempM2 = new Mat3d(), tempM3 = new Mat3d();
	final private static  Vect3d tempV1 = new Vect3d(), tempV2 = new Vect3d(), tempV3 = new Vect3d(), tempV4 = new Vect3d();
	
	public Axis(Vect3d centre, Mat3d Basis, Mat3d MomentOfInertia) {
		this.centre = centre;
		
		B = Basis;
		B.inverse(_B);
		I = MomentOfInertia;
		I.inverse(_I);
	}
	public void update(double dt) {
		update41(dt);
	}
	
	private Mat3d Ib = new Mat3d();
	private Mat3d _Ib = new Mat3d();
	private Mat3d dIb = new Mat3d();
	private Vect3d dw = new Vect3d();
	private void update2(double dt) {
		
		rotateBasis(dt);
		//Ib = BI_B, change of basis.
		Mat3d.mult(Ib, I, _B);
		Mat3d.mult(Ib, B, Ib);
		
		//_Ib = B_I_B
		Mat3d.mult(_Ib, _I, _B);
		Mat3d.mult(_Ib, B, _Ib);
		
		
		//dIb/dt = XwIb - IbXw
		//But (IbXw)w = 0.
		Mat3d.crossTransform(dIb, w, Ib);
		
		
		//dw/dt = _Ib(T - (dIb/dt)w)
		Mat3d.mult(dw, dIb, w);
		Vect3d.sub(dw, torque, dw);
		Mat3d.mult(dw, _Ib, dw);
		
		Vect3d.increment(w, dw, dt);
	}
	public void update3(double dt) {
		rotateBasis(dt);
		
		Vect3d.increment(angMomentum, torque, dt);
		
		//_Ib = B_I_B
		Mat3d _Ib = getInvMomentOfInertia(tempM1);
		
		//w = _Ib L 
		Mat3d.mult(w, _Ib, angMomentum);
		
	}
	public void update4(double dt) {
		
		Mat3d _Ib = this.getInvMomentOfInertia(tempM1);
		rotateBasis(dt);
		Mat3d Ib = this.getMomentOfInertia(tempM2);
		
		Vect3d L =  Mat3d.mult(tempV1, Ib, w);
		Vect3d dw = tempV2;
		torque.copyTo(dw);
		Vect3d.crossIncrement(dw, L, w, 1);
		Mat3d.mult(dw, _Ib, dw);
		
		Vect3d.increment(w, dw, dt);
	}
	
	public void update41(double dt) {
		
		Mat3d _Ib = this.getInvMomentOfInertia(tempM1);
		Mat3d Ib = this.getMomentOfInertia(tempM2);
		
		rotateBasis(dt);
		
		Vect3d L = Mat3d.mult(tempV1, Ib, w);
		Vect3d dw = tempV2;
		torque.copyTo(dw);
		Vect3d.crossIncrement(dw, L, w, 1);
		Mat3d.mult(dw, _Ib, dw);
		
		Vect3d.increment(w, dw, dt);
	}
	
	public void update42(double dt) {
		
		rotateBasis(dt);
		
		Mat3d _Ib = this.getInvMomentOfInertia(tempM1);
		Mat3d Ib = this.getMomentOfInertia(tempM2);
		
		Vect3d L = Mat3d.mult(tempV1, Ib, w);
		Vect3d dw = tempV2;
		torque.copyTo(dw);
		Vect3d.crossIncrement(dw, L, w, 1);
		Mat3d.mult(dw, _Ib, dw);
		
		Vect3d.increment(w, dw, dt);
	}
	
	public Vect3d test() {
		Vect3d L = Mat3d.mult(tempV1, getMomentOfInertia(tempM1), w);
		return L;
	}
	
	public void addTorque(Vect3d force, Vect3d location) {
		Vect3d disp = tempV1;
		Vect3d.sub(disp, location, centre);
		Vect3d.crossIncrement(torque, disp, force, 1);
	}
	
	public Mat3d getMomentOfInertia(Mat3d result) {
		Mat3d.mult(result, I, _B);
		Mat3d.mult(result, B, result);
		return result;
	}
	
	public Mat3d getInvMomentOfInertia(Mat3d result) {
		Mat3d.mult(result, _I, _B);
		Mat3d.mult(result, B, result);
		return result;
	}
	
	public void setAngVel(double x, double y, double z) {
		w.set(x,y,z);
		
		Mat3d Ib = getMomentOfInertia(tempM1);
		Mat3d.mult(angMomentum, Ib, w);
	}
	
	public Vect3d getAngVel(Vect3d result) {
		w.copyTo(result);
		return result;
	}
	public Vect3d getVel(Vect3d result, Vect3d pos) {
		Vect3d difference = tempV1;
		Vect3d.sub(difference, pos, centre);
		Vect3d.cross(result, w, difference);
		return result;
	}
	
	private void rotateBasis(double dt) {
		//rotateTest(B, dt);
		double angle = Math.sqrt(w.lengthSq());
		if(angle == 0)
			return;
		double sin = Math.sin(angle*dt);
		double cos = Math.cos(angle*dt);
		
		Vect3d norm = tempV1;
		Vect3d.scale(norm, w, 1d/angle);
		
		Mat3d R = tempM3;
		Mat3d.I.copyTo(R);
		
	
		R.rotate(norm, cos, sin);
		Mat3d.mult(B, R, B);
		
		//Calc Inverse.
//		Mat3d.I.copyTo(R);
//		R.rotate(norm, cos, -sin);
//		
//		Mat3d.mult(_B, _B, R);
		B.c1.normalize();
		B.c2.normalize();
		B.c3.normalize();
		B.inverse(_B);
	}
	
	//Small angle sin(wdt) =~ wdt?
	private void rotateTest(Mat3d basis, double dt) {
		Vect3d w = Vect3d.scale(tempV4, this.w, dt);
		Vect3d cross = tempV1;
		Vect3d P = tempV2;
		Vect3d W = tempV3;
		double wSq = w.lengthSq();
		double dot = Vect3d.dot(w, basis.c1);
		
		Vect3d.scale(P, basis.c1, 1 - wSq/2d);
		Vect3d.scale(W, w, dot/2);
		Vect3d.cross(cross, w, basis.c1);
		
		Vect3d.add(basis.c1, P, W);
		Vect3d.add(basis.c1, basis.c1, cross);
		/////////
		dot = Vect3d.dot(w, basis.c2);
		
		Vect3d.scale(P, basis.c2, 1 - wSq/2d);
		Vect3d.scale(W, w, dot/2);
		Vect3d.cross(cross, w, basis.c2);
		
		Vect3d.add(basis.c2, P, W);
		Vect3d.add(basis.c2, basis.c2, cross);
		////////
		dot = Vect3d.dot(w, basis.c3);
		
		Vect3d.scale(P, basis.c3, 1 - wSq/2d);
		Vect3d.scale(W, w, dot/2);
		Vect3d.cross(cross, w, basis.c3);
		
		Vect3d.add(basis.c3, P, W);
		Vect3d.add(basis.c3, basis.c3, cross);
	}

	@Override
	public void resetForces() {
		torque.set(0,0,0);
		
	}

}
