package Math;

import java.nio.ByteBuffer;
import java.nio.FloatBuffer;

public class Mat3d {
	
	public Vect3d c1, c2, c3;
	
	public Mat3d() {
		c1 = new Vect3d(1,0,0);
		c2 = new Vect3d(0,1,0);
		c3 = new Vect3d(0,0,1);
	}
	public Mat3d(Vect3d c1, Vect3d c2, Vect3d c3) {
		this.c1 = c1;
		this.c2 = c2;
		this.c3 = c3;
	}

	public static void add(Mat3d result ,Mat3d A, Mat3d B) {
		Vect3d.add(result.c1, A.c1, B.c1);
		Vect3d.add(result.c2, A.c2, B.c2);
		Vect3d.add(result.c3, A.c3, B.c3);
	}
	
	public static void sub(Mat3d result ,Mat3d A, Mat3d B) {
		Vect3d.sub(result.c1, A.c1, B.c1);
		Vect3d.sub(result.c2, A.c2, B.c2);
		Vect3d.sub(result.c3, A.c3, B.c3);
	}
	
	public static void scale(Mat3d result, Mat3d M, double k) {
		Vect3d.scale(result.c1, M.c1, k);
		Vect3d.scale(result.c2, M.c2, k);
		Vect3d.scale(result.c3, M.c3, k);
	}

	public static void mult(Vect3d result, Mat3d M, Vect3d v) {
		Vect3d.scale(result, M.c1, v.x);
		Vect3d.increment(result, M.c2, v.y);
		Vect3d.increment(result, M.c3, v.z);
	}
	
	public static void mult(Mat3d result, Mat3d A, Mat3d B) {
		mult(result.c1, A, B.c1);
		mult(result.c2, A, B.c2);
		mult(result.c3, A, B.c3);
	}
	
	public double det() {
		return c1.x*(c2.y*c3.z - c2.z*c3.y) + c1.y*(c2.z*c3.x - c2.x*c3.z) + c1.z*(c2.x*c3.y - c2.y*c3.x);
		//Vect3d.cross(temp, c2, c3);
		//return Vect3d.dot(c1, temp);
	}
	
	public void transpose() {
		double temp = c1.y;
		c1.y = c2.x;
		c2.x = temp;
		
		temp = c1.z;
		c1.z = c3.x;
		c3.x = temp;
		
		temp = c2.z;
		c2.z = c3.y;
		c3.y = temp;
	}
	
	public void store(FloatBuffer buffer) {
		buffer.put((float) c1.x);
		buffer.put((float) c1.y);
		buffer.put((float) c1.z);
		
		buffer.put((float) c2.x);
		buffer.put((float) c2.y);
		buffer.put((float) c2.z);
		
		buffer.put((float) c3.x);
		buffer.put((float) c3.y);
		buffer.put((float) c3.z);
	}
	
	public void storeForMappedBuffer(ByteBuffer buffer) {
		buffer.putFloat((float) c1.x);
		buffer.putFloat((float) c1.y);
		buffer.putFloat((float) c1.z);
		buffer.putFloat(0.0f);
		
		buffer.putFloat((float) c2.x);
		buffer.putFloat((float) c2.y);
		buffer.putFloat((float) c2.z);
		buffer.putFloat(0.0f);
		
		buffer.putFloat((float) c3.x);
		buffer.putFloat((float) c3.y);
		buffer.putFloat((float) c3.z);
		buffer.putFloat(0.0f);
	}
}