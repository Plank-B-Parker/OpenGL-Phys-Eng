#version 400 core

in vec2 uv;
in vec3 norm;
in vec3 col;

in vec3 toCamera;

#define PI 3.1415926535897932384626433832795

#define num_lights 100

in vec3 worldPos;

layout (std140) uniform Lights{
	vec3 pos[num_lights];
	vec3 forward[num_lights];
	vec3 col[num_lights];
	float fov[num_lights];
}lights;

out vec4 Col;

uniform sampler2D textureSampler;

float calcGaussianSpec(vec3 toLight, vec3 toCam, vec3 norm , float sd){
	vec3 H = normalize(toLight+toCam);
	float HdotN = max(dot(H,norm),0);
	return exp((HdotN*HdotN-1)/(2*sd*sd))/(sd*sqrt(2*PI));
}

float calcPhongSpec(vec3 tolight, vec3 toCam, vec3 normal){
	int gloss = 9;
	vec3 reflRay = tolight + 2*cross(normal, cross(normal, tolight));
	float spec = max(dot(reflRay, toCam),0);
	for(int i = 0; i<=gloss; i++){
		spec *= spec;
	}
	return spec*(gloss+1)/PI;
}

void main(void){
	Col = vec4(0.05,0.05,0.05,1);
	for(int i = 0; i<num_lights; i++){
		
		vec3 tolight = lights.pos[i] - worldPos;
		float distToLight = length(tolight);
		tolight = tolight/distToLight;
		
		float cosA = -dot(tolight,lights.forward[i]);
		
		if(dot(lights.col[i], lights.col[i]) == 0.0f){
			continue;
		}
		if(lights.fov[i] > 0.0f && (cosA < 0 || cosA*cosA < 1.0f/(lights.fov[i]*lights.fov[i] + 1.0f))){
			continue;
		}		
		
		
		float gloss = 30;
		vec3 normal = normalize(norm);
		vec3 toCam = normalize(toCamera);
		
		float diffuse = max(dot(tolight, normal),0);
		diffuse = diffuse/PI;
		float spec = calcGaussianSpec(tolight, toCam, normal, 1/gloss);
		
		vec4 objCol = texture(textureSampler, uv);
		
		vec4 lightcol = vec4(lights.col[i],0);
		
		Col += (0.99*diffuse*objCol*lightcol + 0.01*spec*lightcol)/(distToLight*distToLight);
	}
}